# 功能测试

## 测试工具

### 测试工具 or 代码

//todo

### 常见测试工具

对于可用的功能测试的工具，大致分为cli和gui两种

#### cli：

* [polyglot](https://github.com/grpc-ecosystem/polyglot) - java
* [grpcc](https://github.com/njpatel/grpcc) - Node
* [gcall](https://github.com/bojand/gcall) - Node
* [Evans](https://github.com/ktr0731/evans) - go 最方便，命令简介，简易可视化
* [grpcurl](https://github.com/fullstorydev/grpcurl) - go 最经典的一款

推荐使用evans或者grpcurl

#### gui：

- [letmegrpc](https://github.com/gogo/letmegrpc)
- [omgRPC](https://github.com/troylelandshields/omgrpc)  (Deprecated)
- [grpcui](https://github.com/fullstorydev/grpcui) 
- [BloomRPC](https://github.com/uw-labs/bloomrpc) 
- [gRPCox](https://github.com/gusaul/grpcox)
- [MuninRPC](https://github.com/muninrpc/muninrpc)
- [Delivery](https://github.com/kfwerf/delivery)

推荐使用BloomRPC，界面简洁，操作简单。

## BloomRPC

[github项目地址](https://github.com/uw-labs/bloomrpc)

### 安装

支持各种主流系统，Ubuntu系统直接下载deb文件进行安装。

### 使用

由于直接使用deb安装

使用方式如图：



## grpcurl

[github项目地址](https://github.com/fullstorydev/grpcurl)

### 简介

grpcurl可以当成针对grpc服务的curl工具。

* 支持各种类型rpc方法，可以通过命令行交互的方式进行流式请求的操作。
* 支持服务器反射、也支持proto文件 （获取service信息的方式）
* 支持plain-text和TLS服务

### 安装

可以使用go tool安装：

```
go get github.com/fullstorydev/grpcurl
go install github.com/fullstorydev/grpcurl/cmd/grpcurl
```

### 使用







# 性能测试

## ghz工具

### ghz简介

ghz是一款用于grpc服务的基准测试和负载测试的工具，既可以作为命令行工具使用，也可以作为go package以编程方式进行性能测试。

项目github地址：https://github.com/bojand/ghz

如果作为命令行工具使用，ghz提供了编译好的release版本以供使用。

### ghz测试优点

* 可以根据proto文件、编译好的proto文件、服务器反射等方式自动进行请求
* 可以生成各种格式的报告，包括命令行、csv、json、html、influxdata
* 测试使用的数据可以根据go template或者json file或者二进制文件进行读取

## ghz使用

### 准备工作

grpc服务对应的proto文件 

### 基本选项

本部分摘选了一些基本参数进行介绍,详细参数见项目主页.

```
usage: ghz [<flags>] [<host>]

测试必需的参数:
      --proto=               指定proto文件
      --call=                指定需要测试的grpc服务的method,格式一般为package.service.method
  -i, --import-paths=        指定proto的import文件位置
      --insecure             使用不安全的连接
      
测试输入数据参数:(至少一个)      
  -d, --data=                请求使用的数据,格式为json字符串.当值为@时候,从命令行读入
  -D, --data-file=           请求使用的json文件
  -b, --binary               请求所使用的数据(二进制信息)
  -B, --binary-file=         请求所使用的文件(二进制数据)

测试强度相关的参数:(可以不设置)
  -c, --concurrency=50       测试端使用线程数量, 默认50
  -n, --total=200            测试端测试次数,默认200
  -q, --qps=0                测试端请求qps限制,默认无
  -t, --timeout=20s          每次请求超时时间,默认20s
  -z, --duration=0           忽略-n选项的测试持续时间 eg. 10s 15m, 默认无
  -x, --max-duration=0       保留-n选项的测试最大持续时间 eg. 10s 15m, 默认无
      --connections=1        测试段使用客户端的数量(对于每一个server实例建立的tcp链接数量),默认1
  
测试生成报告相关参数:(各种报告的效果图见附录1,默认summary)
  -o, --output=              测试报告生成位置,默认是stdout
  -O, --format=              测试报告格式: summary, csv, json, pretty, html, influx-summary, influx-details. 默认summary
  --cpus=12                  使用CPU数量
  -v, --version              Show application version.
```

### 测试案例

#### 案例1	简单一元请求

```
ghz --insecure \
  --proto ./greeter.proto \
  --call shannonai.readygo_ecosystem.strings.StringsUtil.Kaptalize \
  -d '{"str":"hello"}' \
  0.0.0.0:50051
```

#### 案例2	简单一元请求	数据轮询

每次发送的数据在-d传入的数组内进行轮换.

```
ghz --insecure \
  --proto ./greeter.proto \
  --call shannonai.readygo_ecosystem.strings.StringsUtil.Kaptalize \
  -d '[{"str":"hello"},{"name":"world"}]' \
  0.0.0.0:50051
```

#### 案例3	客户端流式请求

使用数据轮询的一元请求和流式请求的-d均可以指定一个数组,区别在于一元请求每次发送数组中的一个元素,流式请求将整个数组看做一个stream所需传递的数据.

```
ghz --proto ./greeter.proto \
  --call shannonai.readygo_ecosystem.strings.StringsUtil.Reverse \
  -d '[{"str":"Joe"},{"str":"Kate"},{"str":"Sara"}]' \
  0.0.0.0:50051
```

#### 案例4	设置请求强度相关参数

使用10个客户端,共20个线程,共进行2000次请求.

```
ghz --proto ./greeter.proto \
  --call shannonai.readygo_ecosystem.strings.StringsUtil.Kaptalize \
  -d '{"str":"hello"}' \
  -n 2000 \
  -c 20 \
  --connections=10 \
  0.0.0.0:50051
```

#### 案例5	指定输出格式

使用-o指定输出文件名字,-O选项指定report输出格式. 可选:summary, csv, json, pretty, html, influx-summary, influx-details.效果图见附录1.

```
ghz --insecure \
  --proto ./greeter.proto \
  --call shannonai.readygo_ecosystem.strings.StringsUtil.Kaptalize \
  -d '{"str":"hello"}' \
  -o ./report.html \
  -O html
  0.0.0.0:50051
```

## ghz-web工具

### 简介

ghz-web是一个web应用，它可以保存ghz生成的测试报告，并可以对报告进行可视化。

ghz生成的测试报告可以通过http POST传送给ghz-web，之后会被保存到ghz-web本地的数据库中。ghz-web仅仅支持json格式的报告，仅仅支持sqlite3、mysql、postgres.

### 安装

如果使用sqlite3，那么官方提供的release版本的二进制文件可能无法使用，需要自己从源码编译并且设置CGO_ENABLED=1。

### 使用

#### 1. 准备配置文件

config.yaml

```yaml
---
server:
  port: 3000    # the port for the http server
database:       # the database options
  type: sqlite3
  connection: data/ghz.db
log:
  level: info
  path: /tmp/ghz.log # the path to log file, otherwize stdout is used
```

#### 2. 启动服务器

```
ghz-web -config config.yaml
```

#### 3. 创建工程

登录localhost:3000, 点击界面上的new按钮，输入工程名字即可创建工程。

#### 4.测试结束的报告发送到ghz-web下的工程内

```cmd
ghz --insecure \
    --proto ./greeter.proto \
    --call shannonai.readygo_ecosystem.strings.StringsUtil.Kaptalize \
    -d '{"str": "a"}' \
    --tags '{"env": "staging", "created by":"huang lei"}' \
    -O json \
    0.0.0.0:50051 | http POST localhost:3000/api/projects/34/ingest
```

注释：对于不同的工程，最后一行仅需更改/api/projects/:id/ingest中的id，其余无需改变。

#### 5.结果查看

见附录一



# 测试撰写规范



# 附录

## 附录1	ghz测试报告效果图

### summary效果图

![ghz](https://ghz.sh/img/ghz_cobalt_plain.png)

#### html效果图

#### ![ghz_html](C:\Users\HuangLei\Desktop\ghz_html.png)

#### ghz-web效果图

![](https://ghz.sh/img/project_detail_page.png)

